{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["fuse","Fuse","DATA","data","keys","Search","onSearch","useState","query","setQuery","items","setItems","useEffect","result","search","map","r","item","TextInput","placeholder","value","onChange","event","target","suggestions","label","device_name","icon","onSelect","suggestion","size","Phone","phone","onRemove","color","dimensions","matches","match","widthString","heightString","width","parseFloat","height","getSize","detail","body","newHeight","Box","align","margin","border","round","background","pad","Button","onClick","Close","alignSelf","title","alt","src","image_url","style","maxHeight","maxWidth","Text","visaCard","process","initialData","App","addItem","removeItem","index","slice","concat","Grommet","full","theme","dark","Header","horizontal","vertical","flex","direction","CreditCard","Main","fill","key","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.683f218d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Box, Button, Grommet, Header, Main, Text, TextInput } from \"grommet\";\nimport { Close, CreditCard, Search as SearchIcon } from \"grommet-icons\";\nimport { dark } from \"grommet/themes\";\nimport Fuse from \"fuse.js\";\n\nimport DATA from \"./data.json\";\n\nfunction getSize(dimensions: string): { width: number; height: number } {\n  const matches = dimensions.match(/(\\d+\\.?\\d*) x (\\d+\\.?\\d*)/);\n\n  if (matches) {\n    const [, widthString, heightString] = matches;\n    const width = parseFloat(widthString);\n    const height = parseFloat(heightString);\n    return { width, height };\n  }\n\n  return { width: 0, height: 0 };\n}\n\nconst fuse = new Fuse(DATA.data, {\n  keys: [\"device_name\"],\n});\n\nexport interface SearchProps {\n  onSearch: (item: any) => void;\n}\n\nexport const Search: React.FC<SearchProps> = ({ onSearch }) => {\n  const [query, setQuery] = useState(\"\");\n  const [items, setItems] = useState<any[]>([]);\n\n  useEffect(() => {\n    const result = fuse.search(query);\n    setItems(result.map((r) => r.item));\n  }, [query]);\n\n  return (\n    <TextInput\n      placeholder={\"Search phone\"}\n      value={query}\n      onChange={(event) => setQuery(event.target.value)}\n      suggestions={items.map((item) => ({\n        label: item.device_name,\n        value: item,\n      }))}\n      icon={<SearchIcon />}\n      onSelect={({ suggestion: { label, value } }) => {\n        onSearch(value);\n        setQuery(\"\");\n      }}\n      size={\"small\"}\n    />\n  );\n};\n\nexport interface PhoneProps {\n  phone: any;\n  color: string;\n  onRemove: () => void;\n}\n\nexport const Phone: React.FC<PhoneProps> = ({ phone, onRemove, color }) => {\n  const { width, height } = getSize(phone.detail.body.dimensions);\n  const newHeight = (width / height) * 200;\n\n  return (\n    <Box\n      align={\"center\"}\n      margin={\"small\"}\n      border\n      width={\"200px\"}\n      height={`${newHeight}px`}\n      round={\"small\"}\n      background={color}\n      pad={\"small\"}\n    >\n      <Button\n        onClick={onRemove}\n        icon={<Close />}\n        alignSelf={\"end\"}\n        title={\"Remove\"}\n      />\n      <img\n        alt={phone.device_name}\n        src={phone.image_url}\n        style={{ maxHeight: newHeight * 0.5, maxWidth: \"100%\" }}\n      />\n      <Text margin={\"small\"} size={\"small\"}>\n        {phone.device_name}\n      </Text>\n      <Text size={\"xsmall\"}>\n        {width} mm &times; {height} mm\n      </Text>\n    </Box>\n  );\n};\n\nconst visaCard = {\n  device_name: \"Credit card\",\n  image_url: `${process.env.PUBLIC_URL}/visa-card.png`,\n  detail: {\n    body: {\n      dimensions: \"85.60 x 53.98\",\n    },\n  },\n};\n\nconst initialData = [visaCard, ...DATA.data];\n\nexport const App: React.FC = () => {\n  const [items, setItems] = useState<any[]>(initialData);\n\n  const addItem = (item: any) => {\n    setItems([...items, item]);\n  };\n\n  const removeItem = (index: number) => () => {\n    setItems(items.slice(0, index).concat(items.slice(index + 1)));\n  };\n\n  return (\n    <Grommet full theme={dark}>\n      <Header pad={{ horizontal: \"small\", vertical: \"xsmall\" }}>\n        <Box flex>\n          <Text size={\"large\"} margin={\"small\"}>\n            Phone size comparator\n          </Text>\n        </Box>\n        <Box flex direction={\"row\"} align={\"center\"}>\n          <Search onSearch={addItem} />\n          <Button\n            icon={<CreditCard />}\n            onClick={() => addItem(visaCard)}\n            title={\"Add credit card\"}\n          />\n        </Box>\n        <Box flex />\n      </Header>\n      <Main pad={\"medium\"} fill align={\"center\"}>\n        <Text margin={\"large\"}>Add phones by searching above...</Text>\n        <Box direction={\"row\"} flex>\n          {items.map((item, index) => (\n            <Phone\n              key={index}\n              phone={item}\n              onRemove={removeItem(index)}\n              color={`hsla(${(index * 20) % 360}deg, 100%, 50%, 0.4)`}\n            />\n          ))}\n        </Box>\n      </Main>\n    </Grommet>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}