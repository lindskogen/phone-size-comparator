{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Search","onSearch","fuse","useState","query","setQuery","items","setItems","useEffect","result","search","limit","map","r","item","TextInput","placeholder","value","onChange","event","target","suggestions","label","oem","model","icon","onSelect","suggestion","size","Item","onRemove","scale","dimensions","matches","match","heightString","widthString","width","parseFloat","height","getSize","body_dimensions","newWidth","newHeight","Box","border","round","margin","background","flex","justify","align","Text","Button","onClick","ScaleSlider","direction","RangeInput","min","max","step","left","Math","trunc","creditCard","App","setFuse","setScale","then","data","Fuse","devices","keys","addItem","removeItem","index","slice","concat","Grommet","full","theme","dark","Header","pad","horizontal","vertical","CreditCard","title","key","textAlign","fill","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f22ef7e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Grommet,\n  Header,\n  RangeInput,\n  Text,\n  TextInput,\n} from \"grommet\";\nimport { CreditCard, Search as SearchIcon } from \"grommet-icons\";\nimport { dark } from \"grommet/themes\";\nimport Fuse from \"fuse.js\";\n\nfunction getSize(dimensions: string): { width: number; height: number } {\n  const matches = dimensions.match(/(\\d+\\.?\\d*) x (\\d+\\.?\\d*)/);\n\n  if (matches) {\n    const [, heightString, widthString] = matches;\n    const width = parseFloat(widthString);\n    const height = parseFloat(heightString);\n    return { width, height };\n  }\n\n  return { width: 0, height: 0 };\n}\n\nexport interface SearchProps {\n  fuse: Fuse<any>;\n  onSearch: (item: any) => void;\n}\n\nexport const Search: React.FC<SearchProps> = ({ onSearch, fuse }) => {\n  const [query, setQuery] = useState(\"\");\n  const [items, setItems] = useState<any[]>([]);\n\n  useEffect(() => {\n    const result = fuse.search(query, { limit: 10 });\n    setItems(result.map((r) => r.item));\n  }, [fuse, query]);\n\n  return (\n    <TextInput\n      placeholder={\"Search phone\"}\n      value={query}\n      onChange={(event) => setQuery(event.target.value)}\n      suggestions={items.map((item) => ({\n        label: `${item.oem} ${item.model}`,\n        value: item,\n      }))}\n      icon={<SearchIcon />}\n      onSelect={({ suggestion: { label, value } }) => {\n        onSearch(value);\n        setQuery(\"\");\n      }}\n      size={\"small\"}\n    />\n  );\n};\n\nexport interface ItemProps {\n  item: any;\n  onRemove: () => void;\n  scale: number;\n}\n\nexport const Item: React.FC<ItemProps> = ({ item, onRemove, scale }) => {\n  const { width, height } = getSize(item.body_dimensions);\n  const newWidth = width * 4 * scale;\n  const newHeight = (height / width) * newWidth;\n\n  return (\n    <Box\n      border\n      width={`${newWidth}px`}\n      height={`${newHeight}px`}\n      round={\"small\"}\n      margin={\"small\"}\n      background={\"white\"}\n      flex={false}\n      justify={\"center\"}\n      align={\"center\"}\n    >\n      <Text size={\"small\"}>\n        {item.oem ? `${item.oem} ${item.model}` : item.model}\n      </Text>\n      <Text margin={\"small\"} size={\"small\"}>\n        {width} mm &times; {height} mm\n      </Text>\n      <Button\n        onClick={onRemove}\n        label={\"Remove\"}\n        size={\"small\"}\n        margin={\"xxsmall\"}\n      />\n    </Box>\n  );\n};\n\nexport interface ZoomProps {\n  scale: number;\n  onChange: (zoom: number) => void;\n}\n\nexport const ScaleSlider: React.FC<ZoomProps> = ({ scale, onChange }) => {\n  return (\n    <Box direction={\"row\"} align={\"center\"}>\n      <RangeInput\n        min={0.5}\n        max={2}\n        step={0.05}\n        value={scale}\n        onChange={(event: any) => onChange(event.target.value)}\n      />\n      <Text margin={{ left: \"small\" }}>{Math.trunc(scale * 100)}%</Text>\n    </Box>\n  );\n};\n\nconst creditCard = {\n  model: \"Credit card\",\n  body_dimensions: \"85.60 x 53.98\",\n};\n\nexport const App: React.FC = () => {\n  const [fuse, setFuse] = useState<any>(null);\n  const [items, setItems] = useState<any[]>([creditCard]);\n  const [scale, setScale] = useState(1);\n\n  useEffect(() => {\n    import(\"./phones.min.json\").then((data: any) => {\n      setFuse(new Fuse(data.devices, { keys: [\"oem\", \"model\"] }));\n    });\n  }, []);\n\n  const addItem = (item: any) => {\n    setItems([...items, item]);\n  };\n\n  const removeItem = (index: number) => () => {\n    setItems(items.slice(0, index).concat(items.slice(index + 1)));\n  };\n\n  return (\n    <Grommet full theme={dark}>\n      {fuse ? (\n        <>\n          <Header pad={{ horizontal: \"small\", vertical: \"xsmall\" }}>\n            <Box flex>\n              <Text size={\"large\"} margin={\"small\"}>\n                Phone size comparator\n              </Text>\n            </Box>\n            <Box flex direction={\"row\"} align={\"center\"}>\n              <Search fuse={fuse} onSearch={addItem} />\n              <Button\n                icon={<CreditCard />}\n                onClick={() => addItem(creditCard)}\n                title={\"Add credit card\"}\n              />\n            </Box>\n            <Box flex>\n              <ScaleSlider onChange={setScale} scale={scale} />\n            </Box>\n          </Header>\n          <Box pad={\"medium\"} align={\"center\"}>\n            <Box direction={\"row\"} flex>\n              {items.map((item, index) => (\n                <Item\n                  scale={scale}\n                  key={index}\n                  item={item}\n                  onRemove={removeItem(index)}\n                />\n              ))}\n            </Box>\n            <Text margin={\"large\"} textAlign={\"center\"}>\n              Add phones by searching above...\n              <br />\n              Tip: Match the scale with a credit card to get a real world sense\n              of how big a phone is.\n            </Text>\n          </Box>\n        </>\n      ) : (\n        <Box align={\"center\"} justify={\"center\"} fill>\n          Loading data...\n        </Box>\n      )}\n    </Grommet>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}